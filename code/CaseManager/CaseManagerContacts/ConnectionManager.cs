///////////////////////////////////////////////////////////
//  ConnectionManager.cs
//  Implementation of the Class ConnectionManager
//  Generated by Enterprise Architect
//  Created on:      28-Nov-2017 17:40:59
//  Original author: Terry
///////////////////////////////////////////////////////////


using log4net;
using System;
using System.Data;
using System.Data.Odbc;
namespace caseman.datamodel {

	/// <summary>
	/// This class will handle the connection to the BackingStore
	/// </summary>
	public static class ConnectionManager {
		/// <summary>
		/// This the class level Log4NET reference and is used for all the logging in the
		/// class.
		/// </summary>
        private static readonly ILog mobjLog = LogManager.GetLogger(typeof(ConnectionManager));
		/// <summary>
		/// This the module level connection to the database and is handed out every time a
		/// class needs a connection to the database.
		/// </summary>
        private static OdbcConnection mobjOdbcConnection;



		/// <summary>
		/// This method will return a connection to the databases.
		/// It will check to see if there is already a connection to the database and if
		/// there isn't then it will attempt to connect.
		/// </summary>
		/// <param name="strDsnName">The name of the DSN to which to connect.</param>
		public static OdbcConnection GetDatabaseConnection(string strDsnName){

            string strMess = null;
            mobjLog.Debug("Enter");

            /**Terrence Knoesen 
             * Check that the incoming DSN name is not empty if so through an exception.
            **/
            if (String.IsNullOrEmpty(strDsnName))
            {
                strMess = "The DNS name is null or missing.  Please specify one to connect to.";
                throw new ArgumentException(strMess);
            }

            strMess = "Attempting to get the ODBC connection to the database.";
            mobjLog.Debug(strMess);

            OdbcConnectionStringBuilder objConBuilder = null;
            OdbcConnection objCon = null;
            objConBuilder = new OdbcConnectionStringBuilder();
            //objConBuilder.Dsn = "CaseManagerConnection";
            objConBuilder.Dsn = strDsnName;
            try
            {
                objCon = new OdbcConnection();
                objCon.ConnectionString = objConBuilder.ConnectionString;
                objCon.Open();
                strMess = string.Format("ODBC Connection to database using DSN '{0}' established", objConBuilder.Dsn);
                mobjLog.Debug(strMess);
                if (objCon.State == ConnectionState.Open)
                {
                    /**Terrence Knoesen 
                     * Assign the connection to the module level
                     * variable.
                    **/
                    mobjOdbcConnection = objCon;
                }
                else
                {
                    /*Terrence Knoesen
                     * Check to see if the database is open if not then through an error
                     * */
                    if (objCon.State == ConnectionState.Closed)
                    {
                        strMess = String.Format("Couldn't open the database using DSN '{0}' please check that it exists!", objConBuilder.Dsn);
                        throw new ApplicationException(strMess);
                    }
                }

            }
            catch (Exception ex)
            {
                /**Terrence Knoesen 
                 * As there is no definitive error numbers indicating that the DSN is wrong or missing (only message text indicates this)
                 * it is probably best to leave the error as a generic connection error.
                **/
                strMess = String.Format("Couldn't open the database using DSN '{0}'.  Check that the database exists and is running.", objConBuilder.Dsn);
                mobjLog.Debug(strMess, ex);
                throw new ApplicationException(strMess, ex);
            }


            mobjLog.Debug("Exit");

            return mobjOdbcConnection;

		}

    }//end ConnectionManager

}//end namespace datamodel